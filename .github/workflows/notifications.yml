name: CI/CD for NotificationService

on:
  push:
    branches:
      - main  # Trigger on push to the main branch
  pull_request:
    branches:
      - main  # Trigger on PR to the main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Build Docker Image (without pushing to DockerHub)
      - name: Build Docker Image
        run: |
          docker build -t notification-service:latest ./QuickTradeHub/NotificationService

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Make sure deploy runs after the build job

    steps:
      # Step 1: Checkout Code again to ensure latest code is available for deployment
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Deploy the Docker Container to the Remote Server via SSH
      - name: Deploy to Server using SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          # SSH into the server and stop the running container (if any)
          ssh -o StrictHostKeyChecking=no -i $SSH_PRIVATE_KEY $SSH_USER@$SERVER_IP << EOF
            # Navigate to the directory containing your Docker setup (if needed)
            # Pull and build the Docker image directly on the server
            docker build -t notification-service:latest /path/to/NotificationService/

            # Stop and remove the old container (if it exists)
            docker ps -a --filter "name=notification-service" --format "{{.ID}}" | xargs -r docker stop | xargs -r docker rm

            # Run the new container
            docker run -d --name notification-service -p 3000:3000 notification-service:latest
          EOF
