name: CI/CD for NotificationService

on:
  push:
    branches:
      - main  # Trigger on push to the main branch
  pull_request:
    branches:
      - main  # Trigger on PR to the main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up Docker Buildx for multi-platform support
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Step 3: Build Docker Image (without pushing to DockerHub)
      - name: Build Docker Image
        run: |
          cd NotificationService
          docker build -t notification-service:latest .

  deploy:
    runs-on: ubuntu-latest
    needs: build  # Make sure deploy runs after the build job

    steps:
      # Step 1: Checkout Code again to ensure latest code is available for deployment
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Set up SSH for EC2 connection
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H 13.60.97.119 >> ~/.ssh/known_hosts

      # Step 3: Deploy the Docker Container to the Remote Server via SSH
      - name: Deploy to EC2 using SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          SERVER_IP: 13.60.97.119
          SSH_USER: ubuntu
        run: |
          # Write the SSH private key to the file correctly
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          
          # Debugging: Check current directory and files on EC2
          echo "Checking current directory..."
          pwd
          ls -l

          # SSH into the EC2 instance and stop the running container (if any)
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa $SSH_USER@$SERVER_IP << EOF
            # Navigate to the NotificationService directory
            cd /path/to/NotificationService

            # Check if Dockerfile exists
            ls -l Dockerfile

            # Build Docker image on the server
            docker build -t notification-service:latest .

            # Stop and remove the old container (if it exists)
            docker ps -a --filter "name=notification-service" --format "{{.ID}}" | xargs -r docker stop | xargs -r docker rm

            # Run the new Docker container
            docker run -d --name notification-service -p 3000:3000 notification-service:latest
          EOF
