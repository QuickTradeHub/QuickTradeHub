
QuickTradeHub Authentication API Documentation

---

Base URL:

http://localhost:8080/auth

---

1. User Authentication & Management

1.1 Register a User

Endpoint:

POST /auth/register

Request Body:

{
  "userName": "john_doe",
  "firstName": "John",
  "lastName": "Doe",
  "email": "john@example.com",
  "password": "SecurePassword123",
  "phone": "9876543210",
  "status":"ACTIVE" 
}

Response:

200 OK
User registered successfully with ID: 1

---

1.2 User Login

Endpoint:

POST /auth/login

Request Body:

{
  "email": "john@example.com",
  "password": "SecurePassword123"
}

Response:

{
  "token": "Bearer <JWT_TOKEN>"
}

---

1.3 Validate JWT Token

Endpoint:

GET /auth/validate

Headers:

Authorization: Bearer <JWT_TOKEN>

Response:

200 OK
Token is valid.

---

1.4 Forgot Password

Endpoint:

POST /auth/forgot-password

Request Body:

{
  "email": "john@example.com"
}

Response:

200 OK
Password reset link sent.

---

1.5 Reset Password

Endpoint:

POST /auth/reset-password

Request Body:

{
  "email": "john@example.com",
  "newPassword": "NewSecurePassword123",
  "token": "<RESET_TOKEN>"
}

Response:

200 OK
Password reset successfully.

---

2. User Management (Admin Access Required)

2.1 Get All Users

Endpoint:

GET /auth/users

Response:

[
  {
    "userId": 1,
    "userName": "john_doe",
    "email": "john@example.com",
    "phone": "9876543210",
    "status": "ACTIVE"
  }
]

---

2.2 Get User by ID

Endpoint:

GET /auth/user/{id}

Example Request:

GET /auth/user/1

Response:

{
  "userId": 1,
  "userName": "john_doe",
  "email": "john@example.com",
  "phone": "9876543210",
  "status": "ACTIVE"
}

---

2.3 Update User

Endpoint:

PUT /auth/user/update

Request Body:

{
  "userId": 1,
  "firstName": "John",
  "lastName": "Doe",
  "phone": "9876543210"
}

Response:

200 OK
User updated successfully.

---

2.4 Delete User

Endpoint:

DELETE /auth/user/{id}

Example Request:

DELETE /auth/user/1

Response:

200 OK
User deleted successfully.

---

3. User Addresses

3.1 Add Address to User

Endpoint:

POST /auth/user/{id}/address

Example Request:

POST /auth/user/1/address

Request Body:

{
  "street": "123 Main St",
  "city": "Pune",
  "state": "MH",
  "zipCode": "411001",
  "country": "India",
  "isPrimary": true
}

Response:

200 OK
Address added successfully for user ID: 1

---

3.2 Get All Addresses of a User

Endpoint:

GET /auth/user/{id}/address

Example Request:

GET /auth/user/1/address

Response:

[
  {
    "addressId": 10,
    "street": "123 Main St",
    "city": "Pune",
    "state": "MH",
    "zipCode": "411001",
    "country": "India",
    "isPrimary": true
  }
]

---

4. Security & Authorization

4.1 Spring Security Configuration

Ensure that security settings allow access to these endpoints using:

java
http
    .authorizeHttpRequests(auth -> auth
        .requestMatchers("/auth/**").permitAll()  // Allow public access to auth APIs
        .anyRequest().authenticated()
    )
    .sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))
    .authenticationProvider(authenticationProvider)
    .addFilterBefore(jwtAuthFilter, UsernamePasswordAuthenticationFilter.class);

---

5. Notes

- The register and login endpoints are public.
- Other endpoints require a valid JWT token in the Authorization header.
- Admin actions like getting all users and deleting users should be protected with role-based access control.

---

This API documentation provides a full guide to the QuickTradeHub authentication system. ðŸš€
